import { render, screen } from '@testing-library/react';
import { identityToMana, stringMana, determineIdentity } from './yourHelperFunctions'; // Update the path accordingly
import IconMTG from '../components/IconMTG/IconMTG'; // Update the path accordingly

// Mock IconMTG component for testing
jest.mock('../components/IconMTG/IconMTG', () => ({ manaData, spaced }) => (
  <div data-mana-data={manaData} data-spaced={spaced} />
));

describe('Helper Functions Tests', () => {
  test('identityToMana converts mana identity string to array of IconMTG components', () => {
    const result = identityToMana('RGBWU');
    const icons = screen.getAllByTestId('IconMTG');

    expect(icons).toHaveLength(5);
    expect(icons.map((icon) => icon.getAttribute('data-mana-data'))).toEqual(['R', 'G', 'B', 'W', 'U']);
  });

  test('stringMana converts all mana symbols to IconMTG components', () => {
    const result = stringMana('An example {R} string with {G} mana symbols');
    const icons = screen.getAllByTestId('IconMTG');

    expect(icons).toHaveLength(2);
    expect(icons.map((icon) => icon.getAttribute('data-mana-data'))).toEqual(['R', 'G']);
  });

  test('determineIdentity returns a custom-ordered color identity string', () => {
    const cards = [
      { magidekt: { action: 'add' }, color_identity: ['W'] },
      { magidekt: { action: 'add' }, color_identity: ['U'] },
      { magidekt: { action: 'add' }, color_identity: ['B'] },
      { magidekt: { action: 'add' }, color_identity: ['R'] },
      { magidekt: { action: 'add' }, color_identity: ['G'] },
    ];

    const result = determineIdentity(cards);

    expect(result).toEqual('WUBRG');
  });
});
